在NestJS中，`@GetUser()` 是一个自定义装饰器，通常用于从请求中提取当前认证的用户对象。
为了在 Postman 中测试这样的接口，您需要确保请求中包含了足够的信息以便 NestJS 的认证中间件能够验证用户并注入用户对象。
以下是在 Postman 中获取用户信息并测试该接口的步骤：

1. **用户认证**：
   - 通常，您会先调用登录接口，登录接口返回一个身份验证令牌（例如JWT）。
   - 在 Postman 中调用您的登录接口（比如`POST /auth/login`），提交用户名和密码。
   - 在登录成功后，您将得到一个认证令牌。

2. **携带认证信息**：
   - 获取到令牌后，在测试`@Get()`方法的时候，需要将这个令牌作为请求的一部分发送给服务器。
   - 在Postman中，您可以将令牌添加到请求的`Authorization`头部中。如果是JWT，通常会选择`Bearer Token`类型，然后将令牌粘贴进去。

3. **设置测试接口的请求**：
   - 在 Postman 中设置一个新的`GET`请求到您的任务接口（比如`GET /tasks`）。
   - 如果您的`GetTasksFilterDto`有任何过滤条件，如任务状态、搜索关键词等，添加到查询参数（Params）中。

4. **发送请求并获取用户信息**：
   - 发送请求，NestJS的中间件将会根据携带的认证令牌解析用户信息。
   - 在您的`getTasks`方法中，`@GetUser()`装饰器将会从请求中提取用户信息，并将其传递给该方法。

5. **检查响应**：
   - 如果一切设置正确，您的服务器应该会返回相应的任务列表。
   - 如果返回了错误（例如401 Unauthorized），这可能意味着令牌无效或未提供。

请注意，`@GetUser()` 的实现细节依赖于您的 NestJS 应用程序中的认证策略。
您可能需要检查您应用程序中的`AuthGuard`和相关的用户认证服务，确保它们正确配置。
如果有必要，可以查看您的应用程序文档或代码库来了解`@GetUser()`是如何工作的。